{"ast":null,"code":"var _jsxFileName = \"/Users/Eric/Desktop/team-render-rangers-frontend/src/context/RecipeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from \"react\";\n\n// Define provider props\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecipeContext = /*#__PURE__*/createContext(undefined);\nexport const RecipeProvider = ({\n  children\n}) => {\n  _s();\n  const [recipes, setRecipes] = useState([]);\n  const getRecipeById = id => {\n    return recipes.find(recipe => recipe.recipeId === id);\n  };\n  return /*#__PURE__*/_jsxDEV(RecipeContext.Provider, {\n    value: {\n      recipes,\n      setRecipes,\n      getRecipeById\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(RecipeProvider, \"O/YakigGclqCJkazvNfZLBlWnuY=\");\n_c = RecipeProvider;\nexport const useRecipeContext = () => {\n  _s2();\n  const context = useContext(RecipeContext);\n  if (!context) {\n    throw new Error('useRecipeContext must be used within a RecipeProvider');\n  }\n  return context;\n};\n_s2(useRecipeContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default RecipeContext;\nvar _c;\n$RefreshReg$(_c, \"RecipeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","RecipeContext","undefined","RecipeProvider","children","_s","recipes","setRecipes","getRecipeById","id","find","recipe","recipeId","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useRecipeContext","_s2","context","Error","$RefreshReg$"],"sources":["/Users/Eric/Desktop/team-render-rangers-frontend/src/context/RecipeContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, ReactNode, useContext } from \"react\";\nimport axios from \"axios\";\nimport { Recipe } from \"../models/recipe\";\nimport { getAllRecipes } from \"../services/recipeService.ts\";\n\n\ninterface RecipeContextProps {\n  recipes: Recipe[];\n  setRecipes: React.Dispatch<React.SetStateAction<Recipe[]>>;\n  getRecipeById: (id: number) => Recipe | undefined;\n}\n\n// Define provider props\ninterface RecipeProviderProps {\n  children: ReactNode;\n}\n\nconst RecipeContext = createContext<RecipeContextProps | undefined>(undefined);\n\nexport const RecipeProvider: React.FC<RecipeProviderProps> = ({ children }) => {\n  const [recipes, setRecipes] = useState<Recipe[]>([]);\n\n  const getRecipeById = (id: number): Recipe | undefined => {\n    return recipes.find((recipe) => recipe.recipeId === id);\n  };\n\n  return (\n    <RecipeContext.Provider value={{ recipes, setRecipes, getRecipeById }}>\n      {children}\n    </RecipeContext.Provider>\n  );\n};\n\nexport const useRecipeContext = (): RecipeContextProps => {\n  const context = useContext(RecipeContext);\n  if (!context) {\n    throw new Error('useRecipeContext must be used within a RecipeProvider');\n  }\n  return context;\n};\n\nexport default RecipeContext;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAwBC,UAAU,QAAQ,OAAO;;AAYxF;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKA,MAAMC,aAAa,gBAAGL,aAAa,CAAiCM,SAAS,CAAC;AAE9E,OAAO,MAAMC,cAA6C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7E,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAW,EAAE,CAAC;EAEpD,MAAMW,aAAa,GAAIC,EAAU,IAAyB;IACxD,OAAOH,OAAO,CAACI,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,QAAQ,KAAKH,EAAE,CAAC;EACzD,CAAC;EAED,oBACET,OAAA,CAACC,aAAa,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAER,OAAO;MAAEC,UAAU;MAAEC;IAAc,CAAE;IAAAJ,QAAA,EACnEA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACb,EAAA,CAZWF,cAA6C;AAAAgB,EAAA,GAA7ChB,cAA6C;AAc1D,OAAO,MAAMiB,gBAAgB,GAAGA,CAAA,KAA0B;EAAAC,GAAA;EACxD,MAAMC,OAAO,GAAGxB,UAAU,CAACG,aAAa,CAAC;EACzC,IAAI,CAACqB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;EAC1E;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,gBAAgB;AAQ7B,eAAenB,aAAa;AAAC,IAAAkB,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}