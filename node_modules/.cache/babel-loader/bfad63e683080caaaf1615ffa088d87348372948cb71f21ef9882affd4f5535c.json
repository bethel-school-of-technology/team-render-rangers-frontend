{"ast":null,"code":"var _jsxFileName = \"/Users/Eric/Desktop/team-render-rangers-frontend/src/pages/UpdateRecipe.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport NavBar from \"../components/NavBar.tsx\";\nimport RecipeForm from \"../components/RecipeForm.tsx\";\nimport { getRecipe, updateRecipe } from \"../services/recipeService.ts\";\nimport './CreateRecipe.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UpdateRecipe = () => {\n  _s();\n  const {\n    recipeId\n  } = useParams();\n  const navigate = useNavigate();\n  const [initialData, setInitialData] = useState(null);\n  useEffect(() => {\n    const fetchRecipe = async () => {\n      if (recipeId) {\n        try {\n          const recipe = await getRecipe(parseInt(recipeId, 10));\n          console.log(\"Fetched Recipe:\", recipe);\n          setInitialData({\n            recipeName: recipe.recipeName,\n            recipeCategory: recipe.recipeCategory,\n            recipeIngredients: Array.isArray(recipe.recipeIngredients) ? recipe.recipeIngredients.join(\", \") : recipe.recipeIngredients || \"\",\n            recipeInstructions: Array.isArray(recipe.recipeInstructions) ? recipe.recipeInstructions.join(\". \") : recipe.recipeInstructions || \"\",\n            recipeImgUrl: recipe.recipeImgUrl || \"\"\n          });\n        } catch (error) {\n          console.error(\"Failed to fetch recipe:\", error);\n        }\n      }\n    };\n    fetchRecipe();\n  }, [recipeId]);\n  const handleUpdate = async updatedData => {\n    if (!recipeId) {\n      console.error(\"Recipe ID is missing.\");\n      return;\n    }\n    const parsedRecipeId = parseInt(recipeId, 10);\n    if (isNaN(parsedRecipeId)) {\n      console.error(\"Invalid Recipe ID.\");\n      return;\n    }\n    try {\n      const updatedPayload = {\n        recipeId: parsedRecipeId,\n        recipeName: updatedData.recipeName,\n        recipeCategory: updatedData.recipeCategory,\n        recipeIngredients: updatedData.recipeIngredients,\n        recipeInstructions: updatedData.recipeInstructions,\n        recipeImgUrl: updatedData.recipeImgUrl\n      };\n      console.log(\"Updating with payload:\", updatedPayload);\n      await updateRecipe(parsedRecipeId, updatedPayload);\n      navigate(\"/profile\");\n    } catch (error) {\n      var _error$response;\n      console.error(\"Failed to update recipe:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-recipe-container\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Update Recipe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), initialData ? /*#__PURE__*/_jsxDEV(RecipeForm, {\n      initialData: initialData,\n      onSubmit: handleUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(UpdateRecipe, \"5oSbTbzskitT0e6+cvKkAzn/1n8=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = UpdateRecipe;\nexport default UpdateRecipe;\nvar _c;\n$RefreshReg$(_c, \"UpdateRecipe\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","NavBar","RecipeForm","getRecipe","updateRecipe","jsxDEV","_jsxDEV","UpdateRecipe","_s","recipeId","navigate","initialData","setInitialData","fetchRecipe","recipe","parseInt","console","log","recipeName","recipeCategory","recipeIngredients","Array","isArray","join","recipeInstructions","recipeImgUrl","error","handleUpdate","updatedData","parsedRecipeId","isNaN","updatedPayload","_error$response","response","data","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["/Users/Eric/Desktop/team-render-rangers-frontend/src/pages/UpdateRecipe.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport NavBar from \"../components/NavBar.tsx\";\nimport RecipeForm from \"../components/RecipeForm.tsx\"; \nimport { getRecipe, updateRecipe } from \"../services/recipeService.ts\";\nimport './CreateRecipe.css'; \nimport { Recipe } from \"../models/recipe.ts\";\n\ntype RecipeFormProps = {\n  recipeName: string;\n  recipeCategory: string;\n  recipeIngredients: string;\n  recipeInstructions: string;\n  recipeImgUrl: string;\n};\n\nconst UpdateRecipe: React.FC = () => {\n  const { recipeId } = useParams<{ recipeId: string }>();\n  const navigate = useNavigate();\n  const [initialData, setInitialData] = useState<RecipeFormProps | null>(null);\n\n  useEffect(() => {\n    const fetchRecipe = async () => {\n      if (recipeId) {\n        try {\n          const recipe = await getRecipe(parseInt(recipeId, 10));\n          console.log(\"Fetched Recipe:\", recipe);\n\n          setInitialData({\n            recipeName: recipe.recipeName,\n            recipeCategory: recipe.recipeCategory,\n            recipeIngredients: Array.isArray(recipe.recipeIngredients)\n              ? recipe.recipeIngredients.join(\", \")\n              : recipe.recipeIngredients || \"\",\n            recipeInstructions: Array.isArray(recipe.recipeInstructions)\n              ? recipe.recipeInstructions.join(\". \")\n              : recipe.recipeInstructions || \"\",\n            recipeImgUrl: recipe.recipeImgUrl || \"\",\n          });\n        } catch (error) {\n          console.error(\"Failed to fetch recipe:\", error);\n        }\n      }\n    };\n    fetchRecipe();\n  }, [recipeId]);\n\n  const handleUpdate = async (updatedData: RecipeFormProps) => {\n    if (!recipeId) {\n      console.error(\"Recipe ID is missing.\");\n      return;\n    }\n\n    const parsedRecipeId = parseInt(recipeId, 10);\n    if (isNaN(parsedRecipeId)) {\n      console.error(\"Invalid Recipe ID.\");\n      return;\n    }\n\n    try {\n      const updatedPayload: Recipe = {\n        recipeId: parsedRecipeId,\n        recipeName: updatedData.recipeName,\n        recipeCategory: updatedData.recipeCategory,\n        recipeIngredients: updatedData.recipeIngredients,\n        recipeInstructions: updatedData.recipeInstructions,\n        recipeImgUrl: updatedData.recipeImgUrl,\n      };\n\n      console.log(\"Updating with payload:\", updatedPayload);\n      await updateRecipe(parsedRecipeId, updatedPayload);\n      navigate(\"/profile\"); \n    } catch (error) {\n      console.error(\"Failed to update recipe:\", error.response?.data || error.message);\n    }\n  };\n\n  return (\n    <div className=\"create-recipe-container\">\n      <NavBar />\n      <h1>Update Recipe</h1>\n      {initialData ? (\n        <RecipeForm initialData={initialData} onSubmit={handleUpdate} />\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n\nexport default UpdateRecipe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}